//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPI.Core.Domain.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ResidencySelect_Entities : DbContext
    {
        public ResidencySelect_Entities()
            : base("name=ResidencySelect_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Culture> Culture { get; set; }
        public virtual DbSet<Email> Email { get; set; }
        public virtual DbSet<EmailStatus> EmailStatus { get; set; }
        public virtual DbSet<EmailType> EmailType { get; set; }
        public virtual DbSet<EventPracticeReport> EventPracticeReport { get; set; }
        public virtual DbSet<EventStatus> EventStatus { get; set; }
        public virtual DbSet<EventType> EventType { get; set; }
        public virtual DbSet<HoganField> HoganField { get; set; }
        public virtual DbSet<HoganMVPI> HoganMVPI { get; set; }
        public virtual DbSet<HoganUserInfo> HoganUserInfo { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<Manual_Hogan_Import> Manual_Hogan_Import { get; set; }
        public virtual DbSet<OrderForm> OrderForm { get; set; }
        public virtual DbSet<OrderFormPracticeReport> OrderFormPracticeReport { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<Organization> Organization { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<PersonAssessment> PersonAssessment { get; set; }
        public virtual DbSet<PersonEmail> PersonEmail { get; set; }
        public virtual DbSet<PersonEvent> PersonEvent { get; set; }
        public virtual DbSet<PersonPracticeReport> PersonPracticeReport { get; set; }
        public virtual DbSet<PracticeCategory> PracticeCategory { get; set; }
        public virtual DbSet<PracticeCategoryParagraphs> PracticeCategoryParagraphs { get; set; }
        public virtual DbSet<PracticeCategoryScale> PracticeCategoryScale { get; set; }
        public virtual DbSet<PracticeLevel> PracticeLevel { get; set; }
        public virtual DbSet<PracticeParagraphs> PracticeParagraphs { get; set; }
        public virtual DbSet<PracticeReport> PracticeReport { get; set; }
        public virtual DbSet<PracticeScale> PracticeScale { get; set; }
        public virtual DbSet<PracticeScaleReport> PracticeScaleReport { get; set; }
        public virtual DbSet<PracticeText> PracticeText { get; set; }
        public virtual DbSet<PracticeTextOption> PracticeTextOption { get; set; }
        public virtual DbSet<Program> Program { get; set; }
        public virtual DbSet<ProgramPracticeReports> ProgramPracticeReports { get; set; }
        public virtual DbSet<ProgramSiteHoganMVPI> ProgramSiteHoganMVPI { get; set; }
        public virtual DbSet<ReplacementExpression> ReplacementExpression { get; set; }
        public virtual DbSet<Resx> Resx { get; set; }
        public virtual DbSet<ResxValue> ResxValue { get; set; }
        public virtual DbSet<ScheduledEmail> ScheduledEmail { get; set; }
        public virtual DbSet<ScheduledEmailPerson> ScheduledEmailPerson { get; set; }
        public virtual DbSet<Site> Site { get; set; }
        public virtual DbSet<ZCOExportMap> ZCOExportMap { get; set; }
        public virtual DbSet<ZCOExportTemplate> ZCOExportTemplate { get; set; }
        public virtual DbSet<ZCOExportTemplateMap> ZCOExportTemplateMap { get; set; }
        public virtual DbSet<ZCOUserMap> ZCOUserMap { get; set; }
        public virtual DbSet<vDashboard> vDashboard { get; set; }
        public virtual DbSet<vPersonBySite> vPersonBySite { get; set; }
        public virtual DbSet<ProgramSite> ProgramSites { get; set; }
        public virtual DbSet<SiteUser> SiteUsers { get; set; }
        public virtual DbSet<AssessmentQuestion> AssessmentQuestion { get; set; }
        public virtual DbSet<AssessmentQuestionOption> AssessmentQuestionOption { get; set; }
        public virtual DbSet<AssessmentResponseQuestionOption> AssessmentResponseQuestionOption { get; set; }
        public virtual DbSet<SurveyType> SurveyType { get; set; }
        public virtual DbSet<AssessmentResponse> AssessmentResponse { get; set; }
        public virtual DbSet<EventNotBillableReason> EventNotBillableReason { get; set; }
        public virtual DbSet<EventVGSpecialty> EventVGSpecialty { get; set; }
        public virtual DbSet<OESPracticeReport> OESPracticeReport { get; set; }
        public virtual DbSet<OESSchedule> OESSchedule { get; set; }
        public virtual DbSet<OESSetup> OESSetup { get; set; }
        public virtual DbSet<Event> Event { get; set; }
    
        public virtual ObjectResult<GetPracticeCategoryText_Result> GetPracticeCategoryText(string hoganId, Nullable<int> language, Nullable<int> report, Nullable<int> programId)
        {
            var hoganIdParameter = hoganId != null ?
                new ObjectParameter("HoganId", hoganId) :
                new ObjectParameter("HoganId", typeof(string));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(int));
    
            var reportParameter = report.HasValue ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticeCategoryText_Result>("GetPracticeCategoryText", hoganIdParameter, languageParameter, reportParameter, programIdParameter);
        }
    
        public virtual int GetPracticeScaleParagraphText(string hoganId, Nullable<int> language, Nullable<int> report)
        {
            var hoganIdParameter = hoganId != null ?
                new ObjectParameter("HoganId", hoganId) :
                new ObjectParameter("HoganId", typeof(string));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(int));
    
            var reportParameter = report.HasValue ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPracticeScaleParagraphText", hoganIdParameter, languageParameter, reportParameter);
        }
    
        public virtual ObjectResult<GetPracticeScaleText_Result> GetPracticeScaleText(string hoganId, Nullable<int> language, Nullable<int> report)
        {
            var hoganIdParameter = hoganId != null ?
                new ObjectParameter("HoganId", hoganId) :
                new ObjectParameter("HoganId", typeof(string));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(int));
    
            var reportParameter = report.HasValue ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticeScaleText_Result>("GetPracticeScaleText", hoganIdParameter, languageParameter, reportParameter);
        }
    }
}
