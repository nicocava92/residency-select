//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPI.Core.Domain.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ResidencySelectEntities : DbContext
    {
        public ResidencySelectEntities()
            : base("name=ResidencySelectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AssessmentOption> AssessmentOptions { get; set; }
        public virtual DbSet<AssessmentQuestion> AssessmentQuestions { get; set; }
        public virtual DbSet<AssessmentResponse> AssessmentResponses { get; set; }
        public virtual DbSet<AssessmentResponseQuestionOption> AssessmentResponseQuestionOptions { get; set; }
        public virtual DbSet<Culture> Cultures { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<EmailType> EmailTypes { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventPracticeReport> EventPracticeReports { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<HoganField> HoganFields { get; set; }
        public virtual DbSet<HoganMVPI> HoganMVPIs { get; set; }
        public virtual DbSet<HoganUserInfo> HoganUserInfoes { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Manual_Hogan_Import> Manual_Hogan_Import { get; set; }
        public virtual DbSet<OrderForm> OrderForms { get; set; }
        public virtual DbSet<OrderFormPracticeReport> OrderFormPracticeReports { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PersonEmail> PersonEmails { get; set; }
        public virtual DbSet<PersonEvent> PersonEvents { get; set; }
        public virtual DbSet<PersonPracticeReport> PersonPracticeReports { get; set; }
        public virtual DbSet<PracticeCategory> PracticeCategories { get; set; }
        public virtual DbSet<PracticeCategoryParagraph> PracticeCategoryParagraphs { get; set; }
        public virtual DbSet<PracticeCategoryScale> PracticeCategoryScales { get; set; }
        public virtual DbSet<PracticeLevel> PracticeLevels { get; set; }
        public virtual DbSet<PracticeParagraph> PracticeParagraphs { get; set; }
        public virtual DbSet<PracticeReport> PracticeReports { get; set; }
        public virtual DbSet<PracticeScale> PracticeScales { get; set; }
        public virtual DbSet<PracticeScaleReport> PracticeScaleReports { get; set; }
        public virtual DbSet<PracticeText> PracticeTexts { get; set; }
        public virtual DbSet<PracticeTextOption> PracticeTextOptions { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<ProgramPracticeReport> ProgramPracticeReports { get; set; }
        public virtual DbSet<ProgramSiteHoganMVPI> ProgramSiteHoganMVPIs { get; set; }
        public virtual DbSet<ProgramSite> ProgramSites { get; set; }
        public virtual DbSet<ReplacementExpression> ReplacementExpressions { get; set; }
        public virtual DbSet<Resx> Resxes { get; set; }
        public virtual DbSet<ResxValue> ResxValues { get; set; }
        public virtual DbSet<ScheduledEmail> ScheduledEmails { get; set; }
        public virtual DbSet<ScheduledEmailPerson> ScheduledEmailPersons { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<SiteUser> SiteUsers { get; set; }
        public virtual DbSet<ZCOExportMap> ZCOExportMaps { get; set; }
        public virtual DbSet<ZCOExportTemplate> ZCOExportTemplates { get; set; }
        public virtual DbSet<ZCOExportTemplateMap> ZCOExportTemplateMaps { get; set; }
        public virtual DbSet<ZCOUserMap> ZCOUserMaps { get; set; }
        public virtual DbSet<tempEvent> tempEvents { get; set; }
        public virtual DbSet<tempPersonProgramSiteEvent> tempPersonProgramSiteEvents { get; set; }
        public virtual DbSet<vPersonBySite> vPersonBySites { get; set; }
        public virtual DbSet<EmailStatus> EmailStatus { get; set; }
        public virtual DbSet<EventStatus> EventStatus { get; set; }
        public virtual DbSet<OrderStatus> OrderStatus { get; set; }
        public virtual DbSet<vDashboard> vDashboard { get; set; }
        public virtual DbSet<Organizations> Organizations { get; set; }
    
        public virtual ObjectResult<GetPracticeCategoryText_Result> GetPracticeCategoryText(string hoganId, Nullable<int> language, Nullable<int> report, Nullable<int> programId)
        {
            var hoganIdParameter = hoganId != null ?
                new ObjectParameter("HoganId", hoganId) :
                new ObjectParameter("HoganId", typeof(string));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(int));
    
            var reportParameter = report.HasValue ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(int));
    
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticeCategoryText_Result>("GetPracticeCategoryText", hoganIdParameter, languageParameter, reportParameter, programIdParameter);
        }
    
        public virtual ObjectResult<GetPracticeScaleText_Result> GetPracticeScaleText(string hoganId, Nullable<int> language, Nullable<int> report)
        {
            var hoganIdParameter = hoganId != null ?
                new ObjectParameter("HoganId", hoganId) :
                new ObjectParameter("HoganId", typeof(string));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(int));
    
            var reportParameter = report.HasValue ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticeScaleText_Result>("GetPracticeScaleText", hoganIdParameter, languageParameter, reportParameter);
        }
    }
}
